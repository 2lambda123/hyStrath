
phi = aphiv_pos*rho_pos + aphiv_neg*rho_neg; //- Eq.7 applied for Psi = rho

Info << "phi: " << phi << endl;

surfaceVectorField phiUp //- Eq.7 applied for Phi = rhoU and extra term for pressure
(
    (aphiv_pos*rhoU_pos + aphiv_neg*rhoU_neg)
  + (a_pos*p_pos + a_neg*p_neg)*mesh.Sf()
);

Info << "phiUp with p: " << phiUp << endl;

surfaceScalarField phiEp //- Eq.7 applied for Phi = rhoE and decomposed extra term for pressure (no omega_f for pressure terms, see def of aphiv_pos)
(
    "phiEp",
    aphiv_pos*(rho_pos*(e_pos + 0.5*magSqr(U_pos)) + p_pos)
  + aphiv_neg*(rho_neg*(e_neg + 0.5*magSqr(U_neg)) + p_neg)
  + aSf*p_pos - aSf*p_neg
);

Info << "phiEp: " << phiEp << endl;

// NEW VINCENT ****************************************************************
PtrList<surfaceScalarField> phiEvk(noSolvedVibEq);

if(downgradeSingleT) // NEW VINCENT 05-16/08/2016
{
    phiEvk.clear();
}
else if(downgradeSingleTv)
{
    phiEvk.resize(1);
    
    phiEvk.set
    (
        0,
        new surfaceScalarField
        (
            "phiEv",
            aphiv_pos*rho_pos*evk_pos[0]
          + aphiv_neg*rho_neg*evk_neg[0]
        )
    );
}
else
{
    forAll(phiEvk, speciei)
    { 
        phiEvk.set
        (
            speciei,
            new surfaceScalarField
            (
                "phiEvk_" + Y[speciei].name(),
                aphiv_pos*(pD_pos[speciei]*evk_pos[speciei])
              + aphiv_neg*(pD_neg[speciei]*evk_neg[speciei])
            )
        );
    }
}

// END NEW VINCENT ************************************************************

volScalarField muEff(turbulence->muEff());
volTensorField tauMC("tauMC", muEff*dev2(Foam::T(fvc::grad(U))));

if(hyDev)
{
    Zrot = ZrotInf/(1.0 + sqr(pi)/2.0*sqrt(TZ/thermo.Tt()) + (sqr(pi)/4.0 + pi)*TZ/thermo.Tt());
    Z = 3.0*pi/(4.0*(thermo.zetar()+3.0))*Zrot;
    
    mub = mu*(2.0*thermo.zetar()*Z)/(3.0*(thermo.zetar()+3.0));
    bulkToShearRatio = mub/mu;
    
    tauMC = tauMC + mub*tr(fvc::grad(U))*I;
}

